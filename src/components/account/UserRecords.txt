// /src/components/contents/UserRecords.tsx

"use client";

// External libraries
import React, { useEffect, useState } from "react";
import { getContract, getContractEvents } from "thirdweb";
import { useActiveAccount } from "thirdweb/react";
import {
  transferBatchEvent,
  transferSingleEvent,
} from "thirdweb/extensions/erc1155";
// import { transferEvent } from "thirdweb/extensions/erc20";

// Blockchain configurations
import { client } from "@/config/client";
import { kuponRamadhan } from "@/config/contracts";

const UserRecords = () => {
  const activeAccount = useActiveAccount();
  const [transactions, setTransactions] = useState<null[]>([]);

  useEffect(() => {
    if (!activeAccount) return;

    async function fetchERC1155Transactions() {
      try {
        // Ambil kontrak ERC1155
        const erc1155Contract = getContract({
          client,
          address: kuponRamadhan.address,
          chain: kuponRamadhan.chain,
        });

        console.log("Ambil kontrak ERC1155:", erc1155Contract);

        // üîÑ Ambil event `TransferSingle` dengan filter langsung
        const singleTransfersFrom = await getContractEvents({
          contract: erc1155Contract,
          events: [
            transferSingleEvent({
              _from: "0x0000000000000000000000000000000000000000", // üî• Hanya ambil transaksi yang dikirim oleh activeAccount
              _to: activeAccount?.address, // üî• Atau diterima oleh activeAccount
            }),
          ],
          fromBlock: 17474747n,
          blockRange: 74747n,
        });

        console.log("Ambil event `TransferSingle`:", singleTransfersFrom);

        // üîÑ Ambil event `TransferBatch` dengan filter langsung
        const batchTransfers = await getContractEvents({
          contract: erc1155Contract,
          events: [
            transferBatchEvent({
              _from: activeAccount?.address,
              _to: activeAccount?.address,
            }),
          ],
          fromBlock: 17474747n,
          blockRange: 74747n,
        });

        // üîç Filter transaksi terkait dengan activeAccount
        const filteredTransactions = [
          ...singleTransfers
            .filter(
              (event) =>
                event.args._from === activeAccount?.address ||
                event.args._to === activeAccount?.address
            )
            .map((event) => ({
              type: "NFT",
              transferType:
                event.args._from === activeAccount?.address
                  ? "Sent"
                  : "Received",
              item: `Kupon Digital #${event.args.tokenId}`,
              from: event.args._from,
              to: event.args._to,
              amount: event.args._value,
              blockNumber: Number(event.blockNumber),
              transactionHash: event.transactionHash,
            })),

          ...batchTransfers
            .filter(
              (event) =>
                event.args._from === activeAccount?.address ||
                event.args._to === activeAccount?.address
            )
            .flatMap((event) =>
              event.args.tokenIds.map((tokenId: bigint, index: number) => ({
                type: "NFT",
                transferType:
                  event.args._from === activeAccount?.address
                    ? "Sent"
                    : "Received",
                item: `Kupon Digital #${tokenId}`,
                from: event.args._from,
                to: event.args._to,
                amount: event.args._values[index],
                blockNumber: Number(event.blockNumber),
                transactionHash: event.transactionHash,
              }))
            ),
        ].sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber)); // ‚úÖ Urutkan dari blok terbaru

        console.log("üìå Final ERC1155 Transactions:", filteredTransactions);

        setTransactions(filteredTransactions);
      } catch (error) {
        console.error("‚ùå Error fetching ERC1155 events:", error);
      }
    }

    fetchERC1155Transactions();
  }, [activeAccount]);

  return (
    <div className="max-w-5xl mx-auto p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-3xl font-bold mb-4">
        Riwayat Transaksi NFT (ERC1155)
      </h1>
      <table className="w-full border-collapse">
        <thead>
          <tr className="border-b text-left">
            <th className="py-2 px-4">Daftar Item</th>
            <th className="py-2 px-4">Dari</th>
            <th className="py-2 px-4">Kepada</th>
            <th className="py-2 px-4">Jumlah</th>
            <th className="py-2 px-4">Status</th>
            <th className="py-2 px-4">Blok</th>
          </tr>
        </thead>
        <tbody>
          {transactions.map((tx, index) => (
            <tr key={index} className="border-b">
              <td className="py-2 px-4 flex items-center">
                <div className="w-8 h-8 bg-black rounded-lg mr-2"></div>
                {tx.item}
              </td>
              <td className="py-2 px-4">{tx.from}</td>
              <td className="py-2 px-4">{tx.to}</td>
              <td className="py-2 px-4">{tx.amount.toString()}</td>
              <td className="py-2 px-4">{tx.transferType}</td>
              <td className="py-2 px-4">
                <a
                  href={`https://sepolia.etherscan.io/tx/${tx.transactionHash}`}
                  target="_blank"
                  className="text-blue-500 underline">
                  {tx.blockNumber}
                </a>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserRecords;
